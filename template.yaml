Resources:

  OcrFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: OcrFunction_clean
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Code:
        ZipFile: |
          import json
          import base64
          import boto3

          textract = boto3.client("textract")

          def lambda_handler(event, context):
              try:
                  body = json.loads(event["body"])
                  image_data = base64.b64decode(body["imageBase64"])

                  response = textract.detect_document_text(Document={"Bytes": image_data})

                  text = "\n".join(
                      [b["Text"] for b in response["Blocks"] if b["BlockType"] == "LINE"]
                  )

                  return {
                      "statusCode": 200,
                      "headers": {
                          "Content-Type": "application/json",
                          "Access-Control-Allow-Origin": "*",
                      },
                      "body": json.dumps({"text": text}),
                  }

              except textract.exceptions.UnsupportedDocumentException:
                  return {
                      "statusCode": 400,
                      "headers": {"Access-Control-Allow-Origin": "*"},
                      "body": json.dumps({"error": "Unsupported document format"}),
                  }

              except Exception as e:
                  return {
                      "statusCode": 500,
                      "headers": {"Access-Control-Allow-Origin": "*"},
                      "body": json.dumps({"error": str(e)}),
                  }

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaTextractExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TextractAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - textract:DetectDocumentText
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: OCRApi_clean

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: upload
      RestApiId: !Ref ApiGateway

  ApiMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ApiResource
      RestApiId: !Ref ApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OcrFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ApiMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiResource
      RestApiId: !Ref ApiGateway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiMethodPost
      - ApiMethodOptions
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  LambdaApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OcrFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/upload
